{
  "_from": "sass-loader",
  "_id": "sass-loader@10.0.5",
  "_inBundle": false,
  "_integrity": "sha512-2LqoNPtKkZq/XbXNQ4C64GFEleSEHKv6NPSI+bMC/l+jpEXGJhiRYkAQToO24MR7NU4JRY2RpLpJ/gjo2Uf13w==",
  "_location": "/sass-loader",
  "_phantomChildren": {
    "big.js": "5.2.2",
    "emojis-list": "3.0.0",
    "minimist": "1.2.5"
  },
  "_requested": {
    "escapedName": "sass-loader",
    "fetchSpec": "latest",
    "name": "sass-loader",
    "raw": "sass-loader",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-10.0.5.tgz",
  "_shasum": "f53505b5ddbedf43797470ceb34066ded82bb769",
  "_spec": "sass-loader",
  "_where": "/mnt/c/Users/kaalg/Documents/Retos_de_la_Industria_GrupoR5",
  "author": {
    "name": "J. Tangelder"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/sass-loader/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "klona": "^2.0.4",
    "loader-utils": "^2.0.0",
    "neo-async": "^2.6.2",
    "schema-utils": "^3.0.0",
    "semver": "^7.3.2"
  },
  "deprecated": false,
  "description": "Sass loader for webpack",
  "devDependencies": {
    "@babel/cli": "^7.12.1",
    "@babel/core": "^7.12.3",
    "@babel/preset-env": "^7.12.1",
    "@commitlint/cli": "^11.0.0",
    "@commitlint/config-conventional": "^11.0.0",
    "@webpack-contrib/defaults": "^6.3.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^26.6.0",
    "bootstrap": "^4.5.3",
    "bootstrap-sass": "^3.4.1",
    "cross-env": "^7.0.2",
    "css-loader": "^5.0.0",
    "del": "^6.0.0",
    "del-cli": "^3.0.1",
    "enhanced-resolve": "^5.3.0",
    "eslint": "^7.10.0",
    "eslint-config-prettier": "^6.14.0",
    "eslint-plugin-import": "^2.22.1",
    "fibers": "^5.0.0",
    "file-loader": "^6.1.0",
    "foundation-sites": "^6.6.3",
    "husky": "^4.3.0",
    "jest": "^26.6.0",
    "lint-staged": "^10.4.2",
    "material-components-web": "^7.0.0",
    "memfs": "^3.2.0",
    "node-sass": "^5.0.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.1.2",
    "sass": "^1.27.0",
    "standard-version": "^9.0.0",
    "style-loader": "^2.0.0",
    "webpack": "^5.2.0"
  },
  "engines": {
    "node": ">= 10.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "homepage": "https://github.com/webpack-contrib/sass-loader",
  "keywords": [
    "libsass",
    "loader",
    "sass",
    "webpack"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "name": "sass-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "fibers": ">= 3.1.0",
    "node-sass": "^4.0.0 || ^5.0.0",
    "sass": "^1.3.0",
    "webpack": "^4.36.0 || ^5.0.0"
  },
  "peerDependenciesMeta": {
    "fibers": {
      "optional": true
    },
    "node-sass": {
      "optional": true
    },
    "sass": {
      "optional": true
    }
  },
  "readme": "<div align=\"center\">\r\n  <img height=\"100\"\r\n    src=\"https://worldvectorlogo.com/logos/sass-1.svg\">\r\n  <a href=\"https://github.com/webpack/webpack\">\r\n    <img width=\"200\" height=\"200\"\r\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\r\n  </a>\r\n</div>\r\n\r\n[![npm][npm]][npm-url]\r\n[![node][node]][node-url]\r\n[![deps][deps]][deps-url]\r\n[![tests][tests]][tests-url]\r\n[![coverage][cover]][cover-url]\r\n[![chat][chat]][chat-url]\r\n[![size][size]][size-url]\r\n\r\n# sass-loader\r\n\r\nLoads a Sass/SCSS file and compiles it to CSS.\r\n\r\n## Getting Started\r\n\r\nTo begin, you'll need to install `sass-loader`:\r\n\r\n```console\r\nnpm install sass-loader sass webpack --save-dev\r\n```\r\n\r\n`sass-loader` requires you to install either [Dart Sass](https://github.com/sass/dart-sass) or [Node Sass](https://github.com/sass/node-sass) on your own (more documentation can be found below).\r\n\r\nThis allows you to control the versions of all your dependencies, and to choose which Sass implementation to use.\r\n\r\n> ℹ️ We recommend using [Dart Sass](https://github.com/sass/dart-sass).\r\n\r\n> ⚠ [Node Sass](https://github.com/sass/node-sass) does not work with [Yarn PnP](https://classic.yarnpkg.com/en/docs/pnp/) feature.\r\n\r\nChain the `sass-loader` with the [css-loader](https://github.com/webpack-contrib/css-loader) and the [style-loader](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM or the [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) to extract it into a separate file.\r\n\r\nThen add the loader to your Webpack configuration. For example:\r\n\r\n**app.js**\r\n\r\n```js\r\nimport './style.scss';\r\n```\r\n\r\n**style.scss**\r\n\r\n```scss\r\n$body-color: red;\r\n\r\nbody {\r\n  color: $body-color;\r\n}\r\n```\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          // Creates `style` nodes from JS strings\r\n          'style-loader',\r\n          // Translates CSS into CommonJS\r\n          'css-loader',\r\n          // Compiles Sass to CSS\r\n          'sass-loader',\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nFinally run `webpack` via your preferred method.\r\n\r\n### Resolving `import` at-rules\r\n\r\nWebpack provides an [advanced mechanism to resolve files](https://webpack.js.org/concepts/module-resolution/).\r\n\r\nThe `sass-loader` uses Sass's custom importer feature to pass all queries to the Webpack resolving engine. Thus you can import your Sass modules from `node_modules`. Just prepend them with a `~` to tell Webpack that this is not a relative import:\r\n\r\n```scss\r\n@import '~bootstrap';\r\n```\r\n\r\nIt's important to only prepend it with `~`, because `~/` resolves to the home directory.\r\nWebpack needs to distinguish between `bootstrap` and `~bootstrap` because CSS and Sass files have no special syntax for importing relative files.\r\nWriting `@import \"style.scss\"` is the same as `@import \"./style.scss\";`\r\n\r\n### Problems with `url(...)`\r\n\r\nSince Sass implementations don't provide [url rewriting](https://github.com/sass/libsass/issues/532), all linked assets must be relative to the output.\r\n\r\n- If you pass the generated CSS on to the `css-loader`, all urls must be relative to the entry-file (e.g. `main.scss`).\r\n- If you're just generating CSS without passing it to the `css-loader`, it must be relative to your web root.\r\n\r\nYou will be disrupted by this first issue. It is natural to expect relative references to be resolved against the `.sass`/`.scss` file in which they are specified (like in regular `.css` files).\r\n\r\nThankfully there are a two solutions to this problem:\r\n\r\n- Add the missing url rewriting using the [resolve-url-loader](https://github.com/bholloway/resolve-url-loader). Place it before `sass-loader` in the loader chain.\r\n- Library authors usually provide a variable to modify the asset path. [bootstrap-sass](https://github.com/twbs/bootstrap-sass) for example has an `$icon-font-path`.\r\n\r\n## Options\r\n\r\n|                   Name                    |         Type         |                 Default                 | Description                                                       |\r\n| :---------------------------------------: | :------------------: | :-------------------------------------: | :---------------------------------------------------------------- |\r\n|  **[`implementation`](#implementation)**  |      `{Object}`      |                 `sass`                  | Setup Sass implementation to use.                                 |\r\n|     **[`sassOptions`](#sassoptions)**     | `{Object\\|Function}` | defaults values for Sass implementation | Options for Sass.                                                 |\r\n|       **[`sourceMap`](#sourcemap)**       |     `{Boolean}`      |           `compiler.devtool`            | Enables/Disables generation of source maps.                       |\r\n|  **[`additionalData`](#additionaldata)**  | `{String\\|Function}` |               `undefined`               | Prepends/Appends `Sass`/`SCSS` code before the actual entry file. |\r\n| **[`webpackImporter`](#webpackimporter)** |     `{Boolean}`      |                 `true`                  | Enables/Disables the default Webpack importer.                    |\r\n\r\n### `implementation`\r\n\r\nType: `Object`\r\nDefault: `sass`\r\n\r\nThe special `implementation` option determines which implementation of Sass to use.\r\n\r\nBy default the loader resolve the implementation based on your dependencies.\r\nJust add required implementation to `package.json` (`sass` or `node-sass` package) and install dependencies.\r\n\r\nExample where the `sass-loader` loader uses the `sass` (`dart-sass`) implementation:\r\n\r\n**package.json**\r\n\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n    \"sass-loader\": \"^7.2.0\",\r\n    \"sass\": \"^1.22.10\"\r\n  }\r\n}\r\n```\r\n\r\nExample where the `sass-loader` loader uses the `node-sass` implementation:\r\n\r\n**package.json**\r\n\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n    \"sass-loader\": \"^7.2.0\",\r\n    \"node-sass\": \"^5.0.0\"\r\n  }\r\n}\r\n```\r\n\r\nBeware the situation when `node-sass` and `sass` were installed! By default the `sass-loader` prefers `sass`.\r\nIn order to avoid this situation you can use the `implementation` option.\r\n\r\nThe `implementation` options either accepts `sass` (`Dart Sass`) or `node-sass` as a module.\r\n\r\nFor example, to use Dart Sass, you'd pass:\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              // Prefer `dart-sass`\r\n              implementation: require('sass'),\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nNote that when using `sass` (`Dart Sass`), **synchronous compilation is twice as fast as asynchronous compilation** by default, due to the overhead of asynchronous callbacks.\r\nTo avoid this overhead, you can use the [fibers](https://www.npmjs.com/package/fibers) package to call asynchronous importers from the synchronous code path.\r\n\r\nWe automatically inject the [`fibers`](https://github.com/laverdet/node-fibers) package (setup `sassOptions.fiber`) if is possible (i.e. you need install the [`fibers`](https://github.com/laverdet/node-fibers) package).\r\n\r\n**package.json**\r\n\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n    \"sass-loader\": \"^7.2.0\",\r\n    \"sass\": \"^1.22.10\",\r\n    \"fibers\": \"^4.0.1\"\r\n  }\r\n}\r\n```\r\n\r\nYou can disable automatically injecting the [`fibers`](https://github.com/laverdet/node-fibers) package by passing a `false` value for the `sassOptions.fiber` option.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              implementation: require('sass'),\r\n              sassOptions: {\r\n                fiber: false,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nYou can also pass the `fiber` value using this code:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              implementation: require('sass'),\r\n              sassOptions: {\r\n                fiber: require('fibers'),\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `sassOptions`\r\n\r\nType: `Object|Function`\r\nDefault: defaults values for Sass implementation\r\n\r\nOptions for [Dart Sass](http://sass-lang.com/dart-sass) or [Node Sass](https://github.com/sass/node-sass) implementation.\r\n\r\n> ℹ️ The `indentedSyntax` option has `true` value for the `sass` extension.\r\n\r\n> ℹ️ Options such as `data` and `file` are unavailable and will be ignored.\r\n\r\n> ℹ We recommend not to set the `outFile`, `sourceMapContents`, `sourceMapEmbed`, `sourceMapRoot` options because `sass-loader` automatically sets these options when the `sourceMap` option is `true`.\r\n\r\n> ℹ️ Access to the [loader context](https://webpack.js.org/api/loaders/#the-loader-context) inside the custom importer can be done using the `this.webpackLoaderContext` property.\r\n\r\nThere is a slight difference between the `sass` (`dart-sass`) and `node-sass` options.\r\n\r\nPlease consult documentation before using them:\r\n\r\n- [Dart Sass documentation](https://github.com/sass/dart-sass#javascript-api) for all available `sass` options.\r\n- [Node Sass documentation](https://github.com/sass/node-sass/#options) for all available `node-sass` options.\r\n\r\n#### `Object`\r\n\r\nUse and object for the Sass implementation setup.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              sassOptions: {\r\n                indentWidth: 4,\r\n                includePaths: ['absolute/path/a', 'absolute/path/b'],\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `Function`\r\n\r\nAllows to setup the Sass implementation by setting different options based on the loader context.\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              sassOptions: (loaderContext) => {\r\n                // More information about available properties https://webpack.js.org/api/loaders/\r\n                const { resourcePath, rootContext } = loaderContext;\r\n                const relativePath = path.relative(rootContext, resourcePath);\r\n\r\n                if (relativePath === 'styles/foo.scss') {\r\n                  return {\r\n                    includePaths: ['absolute/path/c', 'absolute/path/d'],\r\n                  };\r\n                }\r\n\r\n                return {\r\n                  includePaths: ['absolute/path/a', 'absolute/path/b'],\r\n                };\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `sourceMap`\r\n\r\nType: `Boolean`\r\nDefault: depends on the `compiler.devtool` value\r\n\r\nEnables/Disables generation of source maps.\r\n\r\nBy default generation of source maps depends on the [`devtool`](https://webpack.js.org/configuration/devtool/) option.\r\nAll values enable source map generation except `eval` and `false` value.\r\n\r\n> ℹ If a `true` the `sourceMap`, `sourceMapRoot`, `sourceMapEmbed`, `sourceMapContents` and `omitSourceMapUrl` from `sassOptions` will be ignored.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          {\r\n            loader: 'css-loader',\r\n            options: {\r\n              sourceMap: true,\r\n            },\r\n          },\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              sourceMap: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n> ℹ In some rare cases `node-sass` can output invalid source maps (it is a `node-sass` bug).\r\n\r\n> > In order to avoid this, you can try to update `node-sass` to latest version or you can try to set within `sassOptions` the `outputStyle` option to `compressed`.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              sourceMap: true,\r\n              sassOptions: {\r\n                outputStyle: 'compressed',\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `additionalData`\r\n\r\nType: `String|Function`\r\nDefault: `undefined`\r\n\r\nPrepends `Sass`/`SCSS` code before the actual entry file.\r\nIn this case, the `sass-loader` will not override the `data` option but just **prepend** the entry's content.\r\n\r\nThis is especially useful when some of your Sass variables depend on the environment:\r\n\r\n#### `String`\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              additionalData: '$env: ' + process.env.NODE_ENV + ';',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `Function`\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              additionalData: (content, loaderContext) => {\r\n                // More information about available properties https://webpack.js.org/api/loaders/\r\n                const { resourcePath, rootContext } = loaderContext;\r\n                const relativePath = path.relative(rootContext, resourcePath);\r\n\r\n                if (relativePath === 'styles/foo.scss') {\r\n                  return '$value: 100px;' + content;\r\n                }\r\n\r\n                return '$value: 200px;' + content;\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `webpackImporter`\r\n\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nEnables/Disables the default Webpack importer.\r\n\r\nThis can improve performance in some cases. Use it with caution because aliases and `@import` at-rules starting with `~` will not work.\r\nYou can pass own `importer` to solve this (see [`importer docs`](https://github.com/sass/node-sass#importer--v200---experimental)).\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          'css-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              webpackImporter: false,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n## Examples\r\n\r\n### Extracts CSS into separate files\r\n\r\nFor production builds it's recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on.\r\n\r\nThere are two possibilities to extract a style sheet from the bundle:\r\n\r\n- [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) (use this, when using webpack 4 configuration. Works in all use-cases)\r\n- [extract-loader](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          // fallback to style-loader in development\r\n          process.env.NODE_ENV !== 'production'\r\n            ? 'style-loader'\r\n            : MiniCssExtractPlugin.loader,\r\n          'css-loader',\r\n          'sass-loader',\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  plugins: [\r\n    new MiniCssExtractPlugin({\r\n      // Options similar to the same options in webpackOptions.output\r\n      // both options are optional\r\n      filename: '[name].css',\r\n      chunkFilename: '[id].css',\r\n    }),\r\n  ],\r\n};\r\n```\r\n\r\n### Source maps\r\n\r\nEnables/Disables generation of source maps.\r\n\r\nTo enable CSS source maps, you'll need to pass the `sourceMap` option to the `sass-loader` _and_ the css-loader.\r\n\r\n**webpack.config.js**\r\n\r\n```javascript\r\nmodule.exports = {\r\n  devtool: 'source-map', // any \"source-map\"-like devtool is possible\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.s[ac]ss$/i,\r\n        use: [\r\n          'style-loader',\r\n          {\r\n            loader: 'css-loader',\r\n            options: {\r\n              sourceMap: true,\r\n            },\r\n          },\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              sourceMap: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nIf you want to edit the original Sass files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). Checkout [test/sourceMap](https://github.com/webpack-contrib/sass-loader/tree/master/test) for a running example.\r\n\r\n## Contributing\r\n\r\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\r\n\r\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\r\n\r\n## License\r\n\r\n[MIT](./LICENSE)\r\n\r\n[npm]: https://img.shields.io/npm/v/sass-loader.svg\r\n[npm-url]: https://npmjs.com/package/sass-loader\r\n[node]: https://img.shields.io/node/v/sass-loader.svg\r\n[node-url]: https://nodejs.org\r\n[deps]: https://david-dm.org/webpack-contrib/sass-loader.svg\r\n[deps-url]: https://david-dm.org/webpack-contrib/sass-loader\r\n[tests]: https://github.com/webpack-contrib/sass-loader/workflows/sass-loader/badge.svg\r\n[tests-url]: https://github.com/webpack-contrib/sass-loader/actions\r\n[cover]: https://codecov.io/gh/webpack-contrib/sass-loader/branch/master/graph/badge.svg\r\n[cover-url]: https://codecov.io/gh/webpack-contrib/sass-loader\r\n[chat]: https://badges.gitter.im/webpack/webpack.svg\r\n[chat-url]: https://gitter.im/webpack/webpack\r\n[size]: https://packagephobia.now.sh/badge?p=sass-loader\r\n[size-url]: https://packagephobia.now.sh/result?p=sass-loader\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/sass-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier --list-different .",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:manual": "npm run build && webpack-dev-server test/manual/src/index.js --open --config test/manual/webpack.config.js",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch"
  },
  "version": "10.0.5"
}
