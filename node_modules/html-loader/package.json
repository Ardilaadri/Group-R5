{
  "_from": "html-loader@^1.3.2",
  "_id": "html-loader@1.3.2",
  "_inBundle": false,
  "_integrity": "sha512-DEkUwSd0sijK5PF3kRWspYi56XP7bTNkyg5YWSzBdjaSDmvCufep5c4Vpb3PBf6lUL0YPtLwBfy9fL0t5hBAGA==",
  "_location": "/html-loader",
  "_phantomChildren": {
    "big.js": "5.2.2",
    "emojis-list": "3.0.0",
    "entities": "2.1.0",
    "minimist": "1.2.5"
  },
  "_requested": {
    "escapedName": "html-loader",
    "fetchSpec": "^1.3.2",
    "name": "html-loader",
    "raw": "html-loader@^1.3.2",
    "rawSpec": "^1.3.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/html-loader/-/html-loader-1.3.2.tgz",
  "_shasum": "5a72ebba420d337083497c9aba7866c9e1aee340",
  "_spec": "html-loader@^1.3.2",
  "_where": "/mnt/c/Users/kaalg/Documents/Retos_de_la_Industria_GrupoR5",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/html-loader/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "html-minifier-terser": "^5.1.1",
    "htmlparser2": "^4.1.0",
    "loader-utils": "^2.0.0",
    "schema-utils": "^3.0.0"
  },
  "deprecated": false,
  "description": "Html loader module for webpack",
  "devDependencies": {
    "@babel/cli": "^7.11.6",
    "@babel/core": "^7.11.6",
    "@babel/preset-env": "^7.11.5",
    "@commitlint/cli": "^11.0.0",
    "@commitlint/config-conventional": "^11.0.0",
    "@webpack-contrib/defaults": "^6.3.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^26.5.2",
    "cross-env": "^7.0.2",
    "del": "^6.0.0",
    "del-cli": "^3.0.1",
    "es-check": "^5.1.1",
    "eslint": "^7.10.0",
    "eslint-config-prettier": "^6.12.0",
    "eslint-plugin-import": "^2.22.1",
    "file-loader": "^6.1.1",
    "handlebars": "^4.7.6",
    "husky": "^4.3.0",
    "jest": "^26.5.2",
    "lint-staged": "^10.4.0",
    "memfs": "^3.2.0",
    "npm-run-all": "^4.1.5",
    "posthtml": "^0.13.3",
    "posthtml-webp": "^2.1.0",
    "prettier": "^2.1.2",
    "standard-version": "^9.0.0",
    "url-loader": "^4.1.1",
    "webpack": "^4.44.2"
  },
  "engines": {
    "node": ">= 10.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "homepage": "https://github.com/webpack-contrib/html-loader",
  "keywords": [
    "html",
    "loader",
    "webpack"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "name": "html-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0 || ^5.0.0"
  },
  "readme": "<div align=\"center\">\r\n  <img width=\"200\" height=\"200\" src=\"https://worldvectorlogo.com/logos/html5.svg\" alt=\"html-loader\">\r\n  <a href=\"https://github.com/webpack/webpack\">\r\n    <img width=\"200\" height=\"200\" vspace=\"\" hspace=\"25\" src=\"https://webpack.js.org/assets/icon-square-big.svg\" alt=\"webpack\">\r\n  </a>\r\n</div>\r\n\r\n[![npm][npm]][npm-url]\r\n[![node][node]][node-url]\r\n[![deps][deps]][deps-url]\r\n[![tests][tests]][tests-url]\r\n[![coverage][cover]][cover-url]\r\n[![chat][chat]][chat-url]\r\n[![size][size]][size-url]\r\n\r\n# html-loader\r\n\r\nExports HTML as string. HTML is minimized when the compiler demands.\r\n\r\n## Getting Started\r\n\r\nTo begin, you'll need to install `html-loader`:\r\n\r\n```console\r\nnpm install --save-dev html-loader\r\n```\r\n\r\nThen add the plugin to your `webpack` config. For example:\r\n\r\n**file.js**\r\n\r\n```js\r\nimport html from './file.html';\r\n```\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n## Options\r\n\r\n|                Name                 |        Type         |                   Default                    | Description                                      |\r\n| :---------------------------------: | :-----------------: | :------------------------------------------: | :----------------------------------------------- |\r\n|   **[`attributes`](#attributes)**   | `{Boolean\\|Object}` |                    `true`                    | Enables/Disables attributes handling             |\r\n| **[`preprocessor`](#preprocessor)** |    `{Function}`     |                 `undefined`                  | Allows pre-processing of content before handling |\r\n|     **[`minimize`](#minimize)**     | `{Boolean\\|Object}` | `true` in production mode, otherwise `false` | Tell `html-loader` to minimize HTML              |\r\n|     **[`esModule`](#esmodule)**     |     `{Boolean}`     |                   `false`                    | Use ES modules syntax                            |\r\n\r\n### `attributes`\r\n\r\nType: `Boolean|Object`\r\nDefault: `true`\r\n\r\nBy default every loadable attributes (for example - `<img src=\"image.png\">`) is imported (`const img = require('./image.png')` or `import img from \"./image.png\"\"`).\r\nYou may need to specify loaders for images in your configuration (recommended `file-loader` or `url-loader`).\r\n\r\nSupported tags and attributes:\r\n\r\n- the `src` attribute of the `audio` tag\r\n- the `src` attribute of the `embed` tag\r\n- the `src` attribute of the `img` tag\r\n- the `srcset` attribute of the `img` tag\r\n- the `src` attribute of the `input` tag\r\n- the `href` attribute of the `link` tag (only for stylesheets)\r\n- the `data` attribute of the `object` tag\r\n- the `src` attribute of the `script` tag\r\n- the `href` attribute of the `script` tag\r\n- the `xlink:href` attribute of the `script` tag\r\n- the `src` attribute of the `source` tag\r\n- the `srcset` attribute of the `source` tag\r\n- the `src` attribute of the `track` tag\r\n- the `poster` attribute of the `video` tag\r\n- the `src` attribute of the `video` tag\r\n- the `xlink:href` attribute of the `image` tag\r\n- the `href` attribute of the `image` tag\r\n- the `xlink:href` attribute of the `use` tag\r\n- the `href` attribute of the `use` tag\r\n\r\n#### `Boolean`\r\n\r\nThe `true` value enables processing of all default elements and attributes, the `false` disable processing of all attributes.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          // Disables attributes processing\r\n          attributes: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `Object`\r\n\r\nAllows you to specify which tags and attributes to process, filter them, filter urls and process sources starts with `/`.\r\n\r\nFor example:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          attributes: {\r\n            list: [\r\n              // All default supported tags and attributes\r\n              '...',\r\n              {\r\n                tag: 'img',\r\n                attribute: 'data-src',\r\n                type: 'src',\r\n              },\r\n              {\r\n                tag: 'img',\r\n                attribute: 'data-srcset',\r\n                type: 'srcset',\r\n              },\r\n            ],\r\n            urlFilter: (attribute, value, resourcePath) => {\r\n              // The `attribute` argument contains a name of the HTML attribute.\r\n              // The `value` argument contains a value of the HTML attribute.\r\n              // The `resourcePath` argument contains a path to the loaded HTML file.\r\n\r\n              if (/example\\.pdf$/.test(value)) {\r\n                return false;\r\n              }\r\n\r\n              return true;\r\n            },\r\n            root: '.',\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `list`\r\n\r\nType: `Array`\r\nDefault: [supported tags and attributes](#attributes).\r\n\r\nAllows to setup which tags and attributes to process and how, and the ability to filter some of them.\r\n\r\nUsing `...` syntax allows you to extend [default supported tags and attributes](#attributes).\r\n\r\nFor example:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          attributes: {\r\n            list: [\r\n              // All default supported tags and attributes\r\n              '...',\r\n              {\r\n                tag: 'img',\r\n                attribute: 'data-src',\r\n                type: 'src',\r\n              },\r\n              {\r\n                tag: 'img',\r\n                attribute: 'data-srcset',\r\n                type: 'srcset',\r\n              },\r\n              {\r\n                // Tag name\r\n                tag: 'link',\r\n                // Attribute name\r\n                attribute: 'href',\r\n                // Type of processing, can be `src` or `scrset`\r\n                type: 'src',\r\n                // Allow to filter some attributes\r\n                filter: (tag, attribute, attributes, resourcePath) => {\r\n                  // The `tag` argument contains a name of the HTML tag.\r\n                  // The `attribute` argument contains a name of the HTML attribute.\r\n                  // The `attributes` argument contains all attributes of the tag.\r\n                  // The `resourcePath` argument contains a path to the loaded HTML file.\r\n\r\n                  if (/my-html\\.html$/.test(resourcePath)) {\r\n                    return false;\r\n                  }\r\n\r\n                  if (!/stylesheet/i.test(attributes.rel)) {\r\n                    return false;\r\n                  }\r\n\r\n                  if (\r\n                    attributes.type &&\r\n                    attributes.type.trim().toLowerCase() !== 'text/css'\r\n                  ) {\r\n                    return false;\r\n                  }\r\n\r\n                  return true;\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nIf the tag name is not specified it will process all the tags.\r\n\r\n> You can use your custom filter to specify html elements to be processed.\r\n\r\nFor example:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          attributes: {\r\n            list: [\r\n              {\r\n                // Attribute name\r\n                attribute: 'src',\r\n                // Type of processing, can be `src` or `scrset`\r\n                type: 'src',\r\n                // Allow to filter some attributes (optional)\r\n                filter: (tag, attribute, attributes, resourcePath) => {\r\n                  // The `tag` argument contains a name of the HTML tag.\r\n                  // The `attribute` argument contains a name of the HTML attribute.\r\n                  // The `attributes` argument contains all attributes of the tag.\r\n                  // The `resourcePath` argument contains a path to the loaded HTML file.\r\n\r\n                  // choose all HTML tags except img tag\r\n                  return tag.toLowerCase() !== 'img';\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `urlFilter`\r\n\r\nType: `Function`\r\nDefault: `undefined`\r\n\r\nAllow to filter urls. All filtered urls will not be resolved (left in the code as they were written).\r\nAll non requestable sources (for example `<img src=\"javascript:void(0)\">`) do not handle by default.\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          attributes: {\r\n            urlFilter: (attribute, value, resourcePath) => {\r\n              // The `attribute` argument contains a name of the HTML attribute.\r\n              // The `value` argument contains a value of the HTML attribute.\r\n              // The `resourcePath` argument contains a path to the loaded HTML file.\r\n\r\n              if (/example\\.pdf$/.test(value)) {\r\n                return false;\r\n              }\r\n\r\n              return true;\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `root`\r\n\r\nType: `String`\r\nDefault: `undefined`\r\n\r\nFor urls that start with a `/`, the default behavior is to not translate them.\r\nIf a `root` query parameter is set, however, it will be prepended to the url and then translated.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          attributes: {\r\n            root: '.',\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `preprocessor`\r\n\r\nType: `Function`\r\nDefault: `undefined`\r\n\r\nAllows pre-processing of content before handling.\r\n\r\n> ⚠ You should always return valid HTML\r\n\r\n**file.hbs**\r\n\r\n```hbs\r\n<div>\r\n  <p>{{firstname}} {{lastname}}</p>\r\n  <img src=\"image.png\" alt=\"alt\" />\r\n<div>\r\n```\r\n\r\n#### `Function`\r\n\r\nYou can set the `preprocessor` option as a `Function` instance.\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nconst Handlebars = require('handlebars');\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.hbs$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          preprocessor: (content, loaderContext) => {\r\n            let result;\r\n\r\n            try {\r\n              result = Handlebars.compile(content)({\r\n                firstname: 'Value',\r\n                lastname: 'OtherValue',\r\n              });\r\n            } catch (error) {\r\n              loaderContext.emitError(error);\r\n\r\n              return content;\r\n            }\r\n\r\n            return result;\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nYou can also set the `preprocessor` option as an asynchronous function instance.\r\n\r\nFor example:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nconst Handlebars = require('handlebars');\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.hbs$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          preprocessor: async (content, loaderContext) => {\r\n            let result;\r\n\r\n            try {\r\n              result = await Handlebars.compile(content)({\r\n                firstname: 'Value',\r\n                lastname: 'OtherValue',\r\n              });\r\n            } catch (error) {\r\n              await loaderContext.emitError(error);\r\n\r\n              return content;\r\n            }\r\n\r\n            return result;\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `minimize`\r\n\r\nType: `Boolean|Object`\r\nDefault: `true` in production mode, otherwise `false`\r\n\r\nTell `html-loader` to minimize HTML.\r\n\r\n#### `Boolean`\r\n\r\nThe enabled rules for minimizing by default are the following ones:\r\n\r\n```js\r\n({\r\n  caseSensitive: true,\r\n  collapseWhitespace: true,\r\n  conservativeCollapse: true,\r\n  keepClosingSlash: true,\r\n  minifyCSS: true,\r\n  minifyJS: true,\r\n  removeComments: true,\r\n  removeRedundantAttributes: true,\r\n  removeScriptTypeAttributes: true,\r\n  removeStyleLinkTypeAttributes: true,\r\n});\r\n```\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          minimize: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n#### `Object`\r\n\r\n**webpack.config.js**\r\n\r\nSee [html-minifier-terser](https://github.com/DanielRuf/html-minifier-terser)'s documentation for more information on the available options.\r\n\r\nThe rules can be disabled using the following options in your `webpack.conf.js`\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          minimize: {\r\n            removeComments: false,\r\n            collapseWhitespace: false,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### `esModule`\r\n\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\nBy default, `html-loader` generates JS modules that use the CommonJS modules syntax.\r\nThere are some cases in which using ES modules is beneficial, like in the case of [module concatenation](https://webpack.js.org/plugins/module-concatenation-plugin/) and [tree shaking](https://webpack.js.org/guides/tree-shaking/).\r\n\r\nYou can enable a ES module syntax using:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          esModule: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n## Examples\r\n\r\n### CDN\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      { test: /\\.jpg$/, loader: 'file-loader' },\r\n      { test: /\\.png$/, loader: 'url-loader' },\r\n    ],\r\n  },\r\n  output: {\r\n    publicPath: 'http://cdn.example.com/[hash]/',\r\n  },\r\n};\r\n```\r\n\r\n**file.html**\r\n\r\n```html\r\n<img src=\"image.jpg\" data-src=\"image2x.png\" />\r\n```\r\n\r\n**index.js**\r\n\r\n```js\r\nrequire('html-loader!./file.html');\r\n\r\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.jpg\" data-src=\"image2x.png\">'\r\n```\r\n\r\n```js\r\nrequire('html-loader?{\"attributes\":{\"list\":[{\"tag\":\"img\",\"attribute\":\"data-src\",\"type\":\"src\"}]}}!./file.html');\r\n\r\n// => '<img src=\"image.jpg\" data-src=\"data:image/png;base64,...\" >'\r\n```\r\n\r\n```js\r\nrequire('html-loader?{\"attributes\":{\"list\":[{\"tag\":\"img\",\"attribute\":\"src\",\"type\":\"src\"},{\"tag\":\"img\",\"attribute\":\"data-src\",\"type\":\"src\"}]}}!./file.html');\r\n\r\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.jpg\" data-src=\"data:image/png;base64,...\" >'\r\n```\r\n\r\n```js\r\nrequire('html-loader?-attributes!./file.html');\r\n\r\n// => '<img src=\"image.jpg\"  data-src=\"image2x.png\" >'\r\n```\r\n\r\n> :warning: `-attributes` sets `attributes: false`.\r\n\r\n### Process `script` and `link` tags\r\n\r\n**script.file.js**\r\n\r\n```js\r\nconsole.log(document);\r\n```\r\n\r\n**style.file.css**\r\n\r\n```css\r\na {\r\n  color: red;\r\n}\r\n```\r\n\r\n**file.html**\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Title of the document</title>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.file.css\" />\r\n  </head>\r\n  <body>\r\n    Content of the document......\r\n    <script src=\"./script.file.js\"></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        use: ['file-loader?name=[name].[ext]', 'extract-loader', 'html-loader'],\r\n      },\r\n      {\r\n        test: /\\.js$/i,\r\n        exclude: /\\.file.js$/i,\r\n        loader: 'babel-loader',\r\n      },\r\n      {\r\n        test: /\\.file.js$/i,\r\n        loader: 'file-loader',\r\n      },\r\n      {\r\n        test: /\\.css$/i,\r\n        exclude: /\\.file.css$/i,\r\n        loader: 'css-loader',\r\n      },\r\n      {\r\n        test: /\\.file.css$/i,\r\n        loader: 'file-loader',\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### 'Root-relative' URLs\r\n\r\nWith the same configuration as in the CDN example:\r\n\r\n**file.html**\r\n\r\n```html\r\n<img src=\"/image.jpg\" />\r\n```\r\n\r\n**scripts.js**\r\n\r\n```js\r\nrequire('html-loader!./file.html');\r\n\r\n// => '<img src=\"/image.jpg\">'\r\n```\r\n\r\n**other-scripts.js**\r\n\r\n```js\r\nrequire('html-loader?{\"attributes\":{\"root\":\".\"}}!./file.html');\r\n\r\n// => '<img src=\"http://cdn.example.com/49eba9f/a992ca.jpg\">'\r\n```\r\n\r\n### Templating\r\n\r\nYou can use any template system. Below is an example for [handlebars](https://handlebarsjs.com/).\r\n\r\n**file.hbs**\r\n\r\n```hbs\r\n<div>\r\n  <p>{{firstname}} {{lastname}}</p>\r\n  <img src=\"image.png\" alt=\"alt\" />\r\n<div>\r\n```\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nconst Handlebars = require('handlebars');\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.hbs$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          preprocessor: (content, loaderContext) => {\r\n            let result;\r\n\r\n            try {\r\n              result = Handlebars.compile(content)({\r\n                firstname: 'Value',\r\n                lastname: 'OtherValue',\r\n              });\r\n            } catch (error) {\r\n              loaderContext.emitError(error);\r\n\r\n              return content;\r\n            }\r\n\r\n            return result;\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### PostHTML\r\n\r\nYou can use [PostHTML](https://github.com/posthtml/posthtml) without any additional loaders.\r\n\r\n**file.html**\r\n\r\n```html\r\n<img src=\"image.jpg\" />\r\n```\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nconst posthtml = require('posthtml');\r\nconst posthtmlWebp = require('posthtml-webp');\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.hbs$/i,\r\n        loader: 'html-loader',\r\n        options: {\r\n          preprocessor: (content, loaderContext) => {\r\n            let result;\r\n\r\n            try {\r\n              result = posthtml().use(plugin).process(content, { sync: true });\r\n            } catch (error) {\r\n              loaderContext.emitError(error);\r\n\r\n              return content;\r\n            }\r\n\r\n            return result.html;\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n### Export into HTML files\r\n\r\nA very common scenario is exporting the HTML into their own _.html_ file, to\r\nserve them directly instead of injecting with javascript. This can be achieved\r\nwith a combination of 3 loaders:\r\n\r\n- [file-loader](https://github.com/webpack/file-loader)\r\n- [extract-loader](https://github.com/peerigon/extract-loader)\r\n- html-loader\r\n\r\nThe html-loader will parse the URLs, require the images and everything you\r\nexpect. The extract loader will parse the javascript back into a proper html\r\nfile, ensuring images are required and point to proper path, and the file loader\r\nwill write the _.html_ file for you. Example:\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.html$/i,\r\n        use: ['file-loader?name=[name].[ext]', 'extract-loader', 'html-loader'],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n## Contributing\r\n\r\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\r\n\r\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\r\n\r\n## License\r\n\r\n[MIT](./LICENSE)\r\n\r\n[npm]: https://img.shields.io/npm/v/html-loader.svg\r\n[npm-url]: https://npmjs.com/package/html-loader\r\n[node]: https://img.shields.io/node/v/html-loader.svg\r\n[node-url]: https://nodejs.org\r\n[deps]: https://david-dm.org/webpack-contrib/html-loader.svg\r\n[deps-url]: https://david-dm.org/webpack-contrib/html-loader\r\n[tests]: https://github.com/webpack-contrib/html-loader/workflows/html-loader/badge.svg\r\n[tests-url]: https://github.com/webpack-contrib/html-loader/actions\r\n[cover]: https://codecov.io/gh/webpack-contrib/html-loader/branch/master/graph/badge.svg\r\n[cover-url]: https://codecov.io/gh/webpack-contrib/html-loader\r\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\r\n[chat-url]: https://gitter.im/webpack/webpack\r\n[size]: https://packagephobia.now.sh/badge?p=html-loader\r\n[size-url]: https://packagephobia.now.sh/result?p=html-loader\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/html-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier --list-different .",
    "postbuild": "npm run validate:runtime",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch",
    "validate:runtime": "es-check es5 \"dist/runtime/**/*.js\""
  },
  "version": "1.3.2"
}
